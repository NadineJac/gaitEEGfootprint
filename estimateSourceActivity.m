%% estimateSourceActivity
% estimete source activity of gait ERP
%
%  needed mat files: scout_all_M1act (from folder "code" has to be loaded as "custom_scout_03" using the brainstorm
%  GUI) after single-subject processing, will be prompted by script
%
%   create three databases in brainstorm according to
%   the tutorial (cf. Tutorial 1: Create new protocol
%   http://neuroimage.usc.edu/brainstorm/Tutorials/CreateProtocol).
%   Settings for the protocol should be set to
%   "Default Anatomy: Yes, use protocol's default anatomy"
%   and "Default channel file: Yes, use one channel file per subject"
%   Protocols' names should be "M1_before", "M1_after" and "M1_afterASR"
%
%   **Steps below are generated with the brainstorm pipeline editor and adapted
%   for a group analysis. Parameters are set to brainstorm default.
%   Comments were generated by brainstorm software. For further information
%   concerning individual parameter settings, please refer to the brainstorm
%   tutorials 15-23/28 (http://neuroimage.usc.edu/brainstorm/Tutorials)**
%
% Developed in MATLAB R2019b
% Nadine Jacobsen (nadine.jacobsen@uni-oldenburg.de),
% January 2020, last revision: 30-June-2020
%
% based on scripts by
% Martin Bleichner 11/01/2018
% Maren Stropahl 25/09/2017

%% params ---------------------------------------------------------------
% prepare workspace
clearvars -except PATH participants;
close all;

% directories
PATHIN  = fullfile(PATH,'derivates','footprint');      % path containing rawdata
PATHOUT = PATHIN;   % path for script output

% other information
ProtocolNames = 'M1_';
CONDS = {'before','after', 'afterASR'};


%% open brainstorm (if it is not already running) ------------------------
if ~brainstorm('status')
    brainstorm nogui
end

for c = 1:length(CONDS)
    ProtocolName = [ProtocolNames, CONDS{c}];
    
    % Get the protocol index
    iProtocol = bst_get('Protocol', ProtocolName);
    if isempty(iProtocol)
        error(['Unknown protocol: ' ProtocolName]);
    end
    
    % Select this procotol
    gui_brainstorm('SetCurrentProtocol', iProtocol);
    
    % ** set path to your current brainstorm protocol. The function will create
    % the path based on the currently open protocol of your brainstorm database
    ProtocolInfo = bst_get('ProtocolInfo');% Configuration of the current protocol
    Path_bs = [ProtocolInfo.STUDIES filesep];
    
    % specific brainstorm variable used for all processes
    sFiles = []; sFiles_BL = [];
    
    
    %% 1. Import and process data with brainstorm ---------------------
    
    % locate pre-processed datasets
    FOLDERS_SUB = dir([PATHIN,filesep,'sub-*']);
    FILES    = dir(fullfile(PATHIN, 'group',['sub-all_warpedGaitEpochs_',CONDS{c},'.set']));
    
    for s = 1:length(FOLDERS_SUB)  % total number of datasets that will be evaluated
        
        % start a new report
        bst_report('Start', []);
        FILES_BL = dir(fullfile(PATHIN, FOLDERS_SUB(s).name,['*standingBL*',CONDS{c},'.set']));  % reads all .set files in that path
        SubjectNames{s} = FILES_BL.name(1:6);
        
        % load data
        %%% standing Baseline: %%%
        %process: Import MEG/EEG: Existing epochs
        sFiles_BL = bst_process('CallProcess', 'process_import_data_time', sFiles, [], ...
            'subjectname',  SubjectNames{s}, ...
            'condition',    'standingBL', ...
            'datafile',     {{[FILES_BL.folder filesep FILES_BL.name ]}, 'EEG-EEGLAB'}, ...
            'timewindow',   [], ...
            'split',        0, ...
            'ignoreshort',  0, ...
            'channelalign', 1, ...
            'usectfcomp',   0, ...
            'usessp',       0, ...
            'freq',         [], ...
            'baseline',     []);
        
        % Process: Project electrodes on scalp
        bst_process('CallProcess', 'process_channel_project', sFiles_BL, []);
        
        % Process: Snapshot: Sensors/MRI registration
        bst_process('CallProcess', 'process_snapshot', sFiles_BL, [], ...
            'target',   1, ...  % Sensors/MRI registration
            'modality', 4, ...  % EEG
            'orient',   1, ...  % left
            'comment',  [SubjectNames{s},': EEG/MRI Registration']);
        
        % process: Compute covariance (noise or data)
        % here: whole standing segment
        sFiles_BL= bst_process('CallProcess', 'process_noisecov', sFiles_BL, [], ...
            'baseline',       [], ... %in seconds
            'datatimewindow', [], ...
            'sensortypes',    'EEG', ...
            'target',         1, ...
            'dcoffset',       1, ...
            'identity',       0, ...
            'copycond',       0, ...
            'copysubj',       0, ...
            'replacefile',    1);
        
        % process: Compute head model (as we use default anatomy, we only need
        % to compute the head model for the 1st subject and we can copy the
        % information to all other subjects, mainly to save some computation
        % time
        if s == 1
            sFiles_BL = bst_process('CallProcess', 'process_headmodel', sFiles_BL, [], ...
                'Comment',     '', ...
                'sourcespace', 1, ...  % Cortex surface
                'volumegrid',  [], ...
                'meg',         2, ...  % Single sphere
                'eeg',         3, ...  % OpenMEEG BEM
                'ecog',        2, ...  % OpenMEEG BEM
                'seeg',        2, ...  % OpenMEEG BEM
                'openmeeg',    struct(...
                'BemFiles',     {{}}, ...
                'BemNames',     {{'Scalp', 'Skull', 'Brain'}}, ...
                'BemCond',      [1, 0.0125, 1], ...
                'BemSelect',    [1, 1, 1], ...
                'isAdjoint',    0, ...
                'isAdaptative', 1, ...
                'isSplit',      0, ...
                'SplitLength',  4000));
            % Get new head model file
            sHeadModel = bst_get('HeadModelForStudy', sFiles_BL(1).iStudy);
        else
            %copy head model computed for the first participant to the current
            %subject
            [sDefaultStudy, iDefaultStudy] = bst_get('DefaultStudy', sFiles_BL(1).SubjectFile);
            db_add(iDefaultStudy , sHeadModel.FileName);
        end
        
        %%% time-warped gait ERP %%%
        % Process: Import MEG/EEG: Existing epochs
        sFiles = bst_process('CallProcess', 'process_import_data_epoch', sFiles, [], ...
            'subjectname',  SubjectNames{s}, ...
            'condition',    'walk', ...
            'datafile',     {{[FILES.folder filesep FILES.name]}, 'EEG-EEGLAB'}, ...
            'iepochs',      s, ...
            'eventtypes',   'type', ...
            'createcond',   0, ...
            'channelalign', 1, ...
            'usectfcomp',   0, ...
            'usessp',       0, ...
            'freq',         [], ...
            'baseline',     []);
        
        % process: Compute sources (2018)
        sFiles = bst_process('CallProcess', 'process_inverse_2018', sFiles, [], ...%Maren 2016
            'output',  2, ...  % Kernel only: one per file
            'inverse', struct(...
            'Comment',        'dSPM: EEG', ...
            'InverseMethod',  'minnorm', ...
            'InverseMeasure', 'dspm2018', ...
            'SourceOrient',   {{'fixed'}}, ...
            'Loose',          0.2, ...
            'UseDepth',       1, ...
            'WeightExp',      0.5, ...
            'WeightLimit',    10, ...
            'NoiseMethod',    'reg', ...
            'NoiseReg',       0.1, ...
            'SnrMethod',      'fixed', ...
            'SnrRms',         1e-06, ...
            'SnrFixed',       3, ...
            'ComputeKernel',  1, ...
            'DataTypes',      {{'EEG'}}));
        
        % Process: Spatial smoothing (3.00,abs)
        sFiles = bst_process('CallProcess', 'process_ssmooth_surfstat',  sFiles, [], ...
            'fwhm',       3, ...
            'overwrite',  1, ...
            'source_abs', 1);
        
        % save and display report
        ReportFile = bst_report('Save', []);
        bst_report('Open', ReportFile);
        
        % clear brainstorm variable sFiles
        sFiles=[]; sFiles_BL =[];
        
    end
end

    %% Group analysis -------------------------------------------------
    % ask user to load custom scouts and press key to continue
    brainstorm
    warning("Please load the custom scouts ""scout_all_M1act"" (from folder ""code"") as ""custom_scout_03""  into all protocols now!")
      input('Press enter to continue once you are done')
    
if ~brainstorm('status')
    brainstorm nogui
end

for c = 1:length(CONDS)
    ProtocolName = [ProtocolNames, CONDS{c}];
    
    % Get the protocol index
    iProtocol = bst_get('Protocol', ProtocolName);
    if isempty(iProtocol)
        error(['Unknown protocol: ' ProtocolName]);
    end
    
     % Select this procotol
    gui_brainstorm('SetCurrentProtocol', iProtocol);
    
    % ** set path to your current brainstorm protocol. The function will create
    % the path based on the currently open protocol of your brainstorm database
    ProtocolInfo = bst_get('ProtocolInfo');% Configuration of the current protocol
    Path_bs = [ProtocolInfo.STUDIES filesep];
    
       % extract source activity ---------------------------------------
    sFiles = [];
    % get all source files
    sAllResultFiles = bst_process('CallProcess', 'process_select_files_results', sFiles, [], ...
        'subjectname',   SubjectNames, ...
        'condition',    'walk', ...
        'tag',           '_02', ...%only use smoothed source estimates
        'includebad',    0, ...
        'includeintra',  0, ...
        'includecommon', 0);
    
    
    %%% whole cortex %%%
    % load custom scouts before!
    sSources{1} = bst_process('CallProcess', 'process_extract_values', sAllResultFiles, [], ...
        'timewindow', [], ...
        'scoutsel',   {'User scouts_03', {'L', 'R'}}, ...
        'scoutfunc',  5, ...  % All
        'isnorm',     1, ...
        'avgtime',    1, ...
        'dim',        2, ...  % Concatenate time (dimension 2)
        'Comment',    'wholeBrain');
    
    
    %%% M1 %%%
    sSources{2} = bst_process('CallProcess', 'process_extract_values', sAllResultFiles, [], ...
        'timewindow', [], ...
        'scoutsel',   {'User scouts_05', {'LM1', 'RM1'}},...
        'scoutfunc',  5, ...  % All
        'isnorm',     1, ...
        'avgtime',    1, ...
        'dim',        2, ...  % Concatenate time (dimension 2)
        'Comment',    'M1');
    
    
    % export matrices to Matlab
    listMatrix = dir(strjoin({Path_bs 'Group_analysis' 'walk' 'matrix_concat*'},filesep));
    for i = 1:length(listMatrix)
        export_matlab([listMatrix(i).folder,filesep,listMatrix(i).name],'tmp');
        export_matlab([listMatrix(i).folder,filesep,listMatrix(i).name],tmp.Comment);
    end
    clearvars tmp i list Matrix
    
    % save
    save(fullfile(PATHOUT, filesep, 'group',['sourceActivations_' CONDS{c}]), 'M1', 'wholeBrain')
    
end


%% housekeeping
clearvars -except PATH participants chanlocs
close all
clc